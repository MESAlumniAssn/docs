{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 The MES College Alumni Association \u00ae Greetings and welcome to the documentation site for mesalumniassociation.com . Before diving deep into technical details, please read further to understand the objectives and goals of the project from an operational and a technology standpoint. Goals \u00b6 Keep the operational costs low Continuous Documentation Keeping the costs low \u00b6 The primary consideration while determining the current website/API architecture was the overall cost. Most pages on the website built for the initial launch are static. The registration/post-registration pages are few exceptions since they connect to a data store. As a result, the website, the database and the backend API are all deployed on a basic virtual private server (VPS) with 1GB of RAM and a 25GB SSD disk. The VPS owned by DigitalOcean , resides in their BLR data centre. The association has been made aware that as the scope of the website increases, the infrastructure will need to be scaled up. Keeping costs in mind, the project uses free/basic tiers of various external cloud based services. For CI/CD, the project uses the free tier of Travis CI Images are served from the free tier of ImageKit For emails, the project is using the Essentials 40K paln from SendGrid Github is the repository for the source code At the moment, the free tier's will suffice. However, if at any time, the scope of the project is deemed to go beyond the allowed limit of any of the free tier's, it needs to be brought to the attention of the association so that an appropriate decision can be taken. Continuous Documentation \u00b6 Presently, the association does not have a dedicated technical team for this project. All technical tasks (including this documentation) have been carried out by an alumni. Until there is a dedicated team, upcoming work will most likely be assigned to other interested alumni or freelancers. It is therefore imperative that any new or changing features are accurately documented so that there is a smooth handover to new project personnel. What this documentation is \u00b6 A guide to set up all the projects A means to understand all the project and user workflows What this documentation is not \u00b6 A tutorial for the different languages and frameworks used in the project A detailed code walk-through Glossary \u00b6 In the documentation, The site project refers to the mes-aa-site repository The api project refers to the mes-aa-api repository The jobs project refers to the mes-aa-jobs repository The docs project refers to the docs repository Technology Stack \u00b6 Frontend \u00b6 Backend \u00b6 Database \u00b6 Other Tools and Services \u00b6","title":"Home"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#goals","text":"Keep the operational costs low Continuous Documentation","title":"Goals"},{"location":"#keeping-the-costs-low","text":"The primary consideration while determining the current website/API architecture was the overall cost. Most pages on the website built for the initial launch are static. The registration/post-registration pages are few exceptions since they connect to a data store. As a result, the website, the database and the backend API are all deployed on a basic virtual private server (VPS) with 1GB of RAM and a 25GB SSD disk. The VPS owned by DigitalOcean , resides in their BLR data centre. The association has been made aware that as the scope of the website increases, the infrastructure will need to be scaled up. Keeping costs in mind, the project uses free/basic tiers of various external cloud based services. For CI/CD, the project uses the free tier of Travis CI Images are served from the free tier of ImageKit For emails, the project is using the Essentials 40K paln from SendGrid Github is the repository for the source code At the moment, the free tier's will suffice. However, if at any time, the scope of the project is deemed to go beyond the allowed limit of any of the free tier's, it needs to be brought to the attention of the association so that an appropriate decision can be taken.","title":"Keeping the costs low"},{"location":"#continuous-documentation","text":"Presently, the association does not have a dedicated technical team for this project. All technical tasks (including this documentation) have been carried out by an alumni. Until there is a dedicated team, upcoming work will most likely be assigned to other interested alumni or freelancers. It is therefore imperative that any new or changing features are accurately documented so that there is a smooth handover to new project personnel.","title":"Continuous Documentation"},{"location":"#what-this-documentation-is","text":"A guide to set up all the projects A means to understand all the project and user workflows","title":"What this documentation is"},{"location":"#what-this-documentation-is-not","text":"A tutorial for the different languages and frameworks used in the project A detailed code walk-through","title":"What this documentation is not"},{"location":"#glossary","text":"In the documentation, The site project refers to the mes-aa-site repository The api project refers to the mes-aa-api repository The jobs project refers to the mes-aa-jobs repository The docs project refers to the docs repository","title":"Glossary"},{"location":"#technology-stack","text":"","title":"Technology Stack"},{"location":"#frontend","text":"","title":"Frontend"},{"location":"#backend","text":"","title":"Backend"},{"location":"#database","text":"","title":"Database"},{"location":"#other-tools-and-services","text":"","title":"Other Tools and Services"},{"location":"architecture/","text":"Application Architecture \u00b6 The website sits behind Cloudflare which acts as the content delivery network (CDN). We are using the free tier of the CDN as the current iteration of the website does not warrant an upgrade to a paid tier. The CDN largely helps in improving the performance by serving the website from Cloudflare's 200 plus PoP's (points of presence). It also serves as a caching layer for static assets. We use a single DigitalOcean droplet running Ubuntu 20.04 LTS which hosts the website, the backend api and the database. The website is developed in Next.js . The backend api endpoints, built with FastAPI talk to a PostgreSQL database. ImageKit.io is our image store. In addition to storing images, we also use ImageKit's transformations while fetching images. All payments are processed via Razorpay 's api and emails to end users/the association are sent from SendGrid . Error Logging & Monitoring \u00b6 For error logging, both, the site and the api projects are integrated with Sentry . The Sentry dashboard logs errors from both development and production. The website is monitored using UptimeRobot which periodically pings to website to check if it is up. Notification emails are sent to tech.****sn@gmail.com. Editing the architecture diagram \u00b6 The diagram was created with draw.io . To edit the image, open the architecture.drawio.png file included in the docs repository on the draw.io website or download the Draw.io Integration plugin for VS Code and open the file in the VS Code editor itself. The architecture diagram is stored in the Docs directory on the project's ImageKit.io account.","title":"Architecture"},{"location":"architecture/#application-architecture","text":"The website sits behind Cloudflare which acts as the content delivery network (CDN). We are using the free tier of the CDN as the current iteration of the website does not warrant an upgrade to a paid tier. The CDN largely helps in improving the performance by serving the website from Cloudflare's 200 plus PoP's (points of presence). It also serves as a caching layer for static assets. We use a single DigitalOcean droplet running Ubuntu 20.04 LTS which hosts the website, the backend api and the database. The website is developed in Next.js . The backend api endpoints, built with FastAPI talk to a PostgreSQL database. ImageKit.io is our image store. In addition to storing images, we also use ImageKit's transformations while fetching images. All payments are processed via Razorpay 's api and emails to end users/the association are sent from SendGrid .","title":"Application Architecture"},{"location":"architecture/#error-logging-monitoring","text":"For error logging, both, the site and the api projects are integrated with Sentry . The Sentry dashboard logs errors from both development and production. The website is monitored using UptimeRobot which periodically pings to website to check if it is up. Notification emails are sent to tech.****sn@gmail.com.","title":"Error Logging &amp; Monitoring"},{"location":"architecture/#editing-the-architecture-diagram","text":"The diagram was created with draw.io . To edit the image, open the architecture.drawio.png file included in the docs repository on the draw.io website or download the Draw.io Integration plugin for VS Code and open the file in the VS Code editor itself. The architecture diagram is stored in the Docs directory on the project's ImageKit.io account.","title":"Editing the architecture diagram"},{"location":"database/","text":"The database \u00b6 The project uses a self hosted PostgreSQL database that runs on the same server as the website and the backend api. All calls to the database are made by the Python api using the SQLAlchemy library. The api uses the async flavor of the SQLAlchemy ORM for the DDL and DML logic. Developers are required to download PostgreSQL 12 or higher for local development. As an add-on, developers can also download a tool like PgAdmin (or equivalent) to easily work with the data. When developing locally, assuming the developer is using the default PostgreSQL values, the connecting string for the database in the .env file, in the api project will look something like this - SQLALCHEMY_DATABASE_URI=postgresql+asyncpg://postgres:postgres@127.0.0.1:5432/mes-aa mes-aa here is the name of the database. Models \u00b6 The Python api contains all the model definitions in /database.models.py . Migrations \u00b6 For database migrations, the project uses the Alembic library. Migrations need to be run separately on the server during deployment.","title":"Database"},{"location":"database/#the-database","text":"The project uses a self hosted PostgreSQL database that runs on the same server as the website and the backend api. All calls to the database are made by the Python api using the SQLAlchemy library. The api uses the async flavor of the SQLAlchemy ORM for the DDL and DML logic. Developers are required to download PostgreSQL 12 or higher for local development. As an add-on, developers can also download a tool like PgAdmin (or equivalent) to easily work with the data. When developing locally, assuming the developer is using the default PostgreSQL values, the connecting string for the database in the .env file, in the api project will look something like this - SQLALCHEMY_DATABASE_URI=postgresql+asyncpg://postgres:postgres@127.0.0.1:5432/mes-aa mes-aa here is the name of the database.","title":"The database"},{"location":"database/#models","text":"The Python api contains all the model definitions in /database.models.py .","title":"Models"},{"location":"database/#migrations","text":"For database migrations, the project uses the Alembic library. Migrations need to be run separately on the server during deployment.","title":"Migrations"},{"location":"documentation/","text":"Updating the documentation \u00b6 The documentation site uses Material for MKDocs . All the pages are written in Markdown with few sprinkles of HTML and CSS. The documentation site is hosted on Github Pages. The configuration file, ci.yml is located in .github/workflows in the docs repository. Once a change is pushed to the main branch, the workflow automatically kicks off and deploys the site on Github Pages. Presently, all changes are being pushed directly to the main branch. It is up to the developers, if they would like to create a feature branch and merge the changes to main .","title":"Documentation Changes"},{"location":"documentation/#updating-the-documentation","text":"The documentation site uses Material for MKDocs . All the pages are written in Markdown with few sprinkles of HTML and CSS. The documentation site is hosted on Github Pages. The configuration file, ci.yml is located in .github/workflows in the docs repository. Once a change is pushed to the main branch, the workflow automatically kicks off and deploys the site on Github Pages. Presently, all changes are being pushed directly to the main branch. It is up to the developers, if they would like to create a feature branch and merge the changes to main .","title":"Updating the documentation"},{"location":"setup/","text":"Setting up the projects \u00b6 Following github repositories under the MESAlumniAssn user contain all the projects - mes-aa-site - the Next.js/React website mes-aa-api - the Python based api mes-aa-jobs - the helper jobs running on the server docs - the documentation site Install dependencies \u00b6 Python v3.8 Node.js v14.17.6 or higher Setting up the mes-aa-api project locally \u00b6 Clone the repository - git clone https://github.com/MESAlumniAssn/mes-aa-api Create a virtual environment - python -m venv venv Activate the virtual environment - venv\\Scripts\\activate (windows) or source venv/bin/activate (Linux/MacOS) Install the project dependencies - pip install -r requirements.txt Create the environment variables in a .env file. Refer to the .env.example file for the list of variables Run the project - uvicorn app.main:app --reload This project should be run before starting the website ( mes-aa-site ) The requirements.txt on the server contains additional dependencies like gunicorn which are not needed locally to run the project in the present setup Setting up the mes-aa-site project locally \u00b6 Clone the repository - https://github.com/MESAlumniAssn/mes-aa-site Install the project dependencies - npm i Create the environment variables in a .env.local file. Refer to the .env.local.example file for the lit of variables Run the project - npm run dev Setting up the mes-aa-jobs project locally \u00b6 Clone the repository - https://github.com/MESAlumniAssn/mes-aa-jobs Create a virtual environment - python -m venv venv Activate the virtual environment - venv\\Scripts\\activate (windows) or source venv/bin/activate (Linux/MacOS) Install the project dependencies - pip install -r requirements.txt Create the environment variables in a .env file. Refer to the .env.example file for the list of variables Run a specific job - Birthday notifications - python birthday.py Membership expiry notifications - python expiry_notifications.py Renewal notifications - python renewal_notifications.py Setting up the docs project locally \u00b6 Clone the repository - https://github.com/MESAlumniAssn/mes-aa-jobs Create a virtual environment - python -m venv venv Activate the virtual environment - venv\\Scripts\\activate (windows) or source venv/bin/activate (Linux/MacOS) Install the project dependencies - pip install -r requirements.txt Run the project - mk docs serve","title":"Project Setup"},{"location":"setup/#setting-up-the-projects","text":"Following github repositories under the MESAlumniAssn user contain all the projects - mes-aa-site - the Next.js/React website mes-aa-api - the Python based api mes-aa-jobs - the helper jobs running on the server docs - the documentation site","title":"Setting up the projects"},{"location":"setup/#install-dependencies","text":"Python v3.8 Node.js v14.17.6 or higher","title":"Install dependencies"},{"location":"setup/#setting-up-the-mes-aa-api-project-locally","text":"Clone the repository - git clone https://github.com/MESAlumniAssn/mes-aa-api Create a virtual environment - python -m venv venv Activate the virtual environment - venv\\Scripts\\activate (windows) or source venv/bin/activate (Linux/MacOS) Install the project dependencies - pip install -r requirements.txt Create the environment variables in a .env file. Refer to the .env.example file for the list of variables Run the project - uvicorn app.main:app --reload This project should be run before starting the website ( mes-aa-site ) The requirements.txt on the server contains additional dependencies like gunicorn which are not needed locally to run the project in the present setup","title":"Setting up the mes-aa-api project locally"},{"location":"setup/#setting-up-the-mes-aa-site-project-locally","text":"Clone the repository - https://github.com/MESAlumniAssn/mes-aa-site Install the project dependencies - npm i Create the environment variables in a .env.local file. Refer to the .env.local.example file for the lit of variables Run the project - npm run dev","title":"Setting up the mes-aa-site project locally"},{"location":"setup/#setting-up-the-mes-aa-jobs-project-locally","text":"Clone the repository - https://github.com/MESAlumniAssn/mes-aa-jobs Create a virtual environment - python -m venv venv Activate the virtual environment - venv\\Scripts\\activate (windows) or source venv/bin/activate (Linux/MacOS) Install the project dependencies - pip install -r requirements.txt Create the environment variables in a .env file. Refer to the .env.example file for the list of variables Run a specific job - Birthday notifications - python birthday.py Membership expiry notifications - python expiry_notifications.py Renewal notifications - python renewal_notifications.py","title":"Setting up the mes-aa-jobs project locally"},{"location":"setup/#setting-up-the-docs-project-locally","text":"Clone the repository - https://github.com/MESAlumniAssn/mes-aa-jobs Create a virtual environment - python -m venv venv Activate the virtual environment - venv\\Scripts\\activate (windows) or source venv/bin/activate (Linux/MacOS) Install the project dependencies - pip install -r requirements.txt Run the project - mk docs serve","title":"Setting up the docs project locally"},{"location":"workflow/","text":"Developer Workflow \u00b6 Until the site went live, all changes were checked directly into the main branch of the respective projects. Now that we are live, following is the recommended approach for making changes in the site , api and jobs projects. Changes to docs can be pushed directly to the main branch. The below processes do not apply to the docs project. See documentation changes for details to update the project documentation. Getting access \u00b6 It is preferred that developers use their personal Github accounts and request for access to all the repos under MESAlumniAssn . All passwords are stored in a LastPass... vault. The developers who require access to any specific service, should contact the association for specific passwords. Github workflow \u00b6 Whenever there is a new feature request or a potential bug fix, the first step is to open an issue in Github using the pre-configured template. The new feature template exists only in the mes-aa-site repository where as all the projects contain the bug fix template. Next, create a local branch - git checkout -b <branch_name> The naming convention for branches should be as follows - Bug fix - mes-aa-bug-issue_number Ex: mes-aa-bug-#10 New feature - mes-aa-feature-issue_number Ex: mes-aa-feature-#11 Composite (includes both a bux fix and new feature) - mes-aa-hybrid-issue_number_1-issue_number_2 Ex: mes-aa-hybrid-#12-#13 Once the changes are complete and tested, commit the changes and push the changes to the remote repo - git push origin <branch_name> . Next, create a pull request, check for merge conflicts (if any) and merge the changes with the main branch and close the pull request. This will automatically close the issue as well. The CI/CD pipeline \u00b6 Once the changes are merged with main , the CI/CD pipeline kicks off on Travis CI (the Build pushed branches option is checked for all the repo's on Travis CI). Each project includes a travis.yml file with the build configuration. At the moment, tests are only included for the mes-aa-site repository. These tests were added merely to serve as a smoke test prior to deployment. There is an opportunity to add tests for the api and jobs projects as well. During the initial phase of the project, the developer received continuous feedback from the website committee. Due to this, the addition of tests was low on the priority list. This needs to be eventually addressed. The final step of the build, executes a shell script, deploy.sh . This deploys the code from the latest build on the server. The Python api backend uses gunicorn which is run as a daemon process using the supervisor package. Once any change is deployed for the api project, supervisor must be restarted when logged in as the sudo user on the server, using the command sudo supervisorctl reload No separate restarts are needed for the site project. This is automatically handled in the deploy.sh script. For details on the pipeline and server setup, please refer to these articles Initial setup on a Linux server Deploying a Python application - the article walks through a Flask app but the steps are same Deploying a react application Setting up the CD/Cd pipeline","title":"Developer Workflow"},{"location":"workflow/#developer-workflow","text":"Until the site went live, all changes were checked directly into the main branch of the respective projects. Now that we are live, following is the recommended approach for making changes in the site , api and jobs projects. Changes to docs can be pushed directly to the main branch. The below processes do not apply to the docs project. See documentation changes for details to update the project documentation.","title":"Developer Workflow"},{"location":"workflow/#getting-access","text":"It is preferred that developers use their personal Github accounts and request for access to all the repos under MESAlumniAssn . All passwords are stored in a LastPass... vault. The developers who require access to any specific service, should contact the association for specific passwords.","title":"Getting access"},{"location":"workflow/#github-workflow","text":"Whenever there is a new feature request or a potential bug fix, the first step is to open an issue in Github using the pre-configured template. The new feature template exists only in the mes-aa-site repository where as all the projects contain the bug fix template. Next, create a local branch - git checkout -b <branch_name> The naming convention for branches should be as follows - Bug fix - mes-aa-bug-issue_number Ex: mes-aa-bug-#10 New feature - mes-aa-feature-issue_number Ex: mes-aa-feature-#11 Composite (includes both a bux fix and new feature) - mes-aa-hybrid-issue_number_1-issue_number_2 Ex: mes-aa-hybrid-#12-#13 Once the changes are complete and tested, commit the changes and push the changes to the remote repo - git push origin <branch_name> . Next, create a pull request, check for merge conflicts (if any) and merge the changes with the main branch and close the pull request. This will automatically close the issue as well.","title":"Github workflow"},{"location":"workflow/#the-cicd-pipeline","text":"Once the changes are merged with main , the CI/CD pipeline kicks off on Travis CI (the Build pushed branches option is checked for all the repo's on Travis CI). Each project includes a travis.yml file with the build configuration. At the moment, tests are only included for the mes-aa-site repository. These tests were added merely to serve as a smoke test prior to deployment. There is an opportunity to add tests for the api and jobs projects as well. During the initial phase of the project, the developer received continuous feedback from the website committee. Due to this, the addition of tests was low on the priority list. This needs to be eventually addressed. The final step of the build, executes a shell script, deploy.sh . This deploys the code from the latest build on the server. The Python api backend uses gunicorn which is run as a daemon process using the supervisor package. Once any change is deployed for the api project, supervisor must be restarted when logged in as the sudo user on the server, using the command sudo supervisorctl reload No separate restarts are needed for the site project. This is automatically handled in the deploy.sh script. For details on the pipeline and server setup, please refer to these articles Initial setup on a Linux server Deploying a Python application - the article walks through a Flask app but the steps are same Deploying a react application Setting up the CD/Cd pipeline","title":"The CI/CD pipeline"},{"location":"api/api_structure/","text":"Project Structure \u00b6 The Python api uses the FastAPI framework. Directories \u00b6 The main.py file in /app contains the app initialization and middleware logic. The database directory contains the database model definitions in models.py , the sqlalchemy initialization logic in db.py . All the database queries are spread across multiple files (named after the corresponding functionality) in the data_access sub-directory. routers contains all the REST endpoints called from the website. helpers contains some helper functions like the initialization methods for third party services.","title":"Project Structure"},{"location":"api/api_structure/#project-structure","text":"The Python api uses the FastAPI framework.","title":"Project Structure"},{"location":"api/api_structure/#directories","text":"The main.py file in /app contains the app initialization and middleware logic. The database directory contains the database model definitions in models.py , the sqlalchemy initialization logic in db.py . All the database queries are spread across multiple files (named after the corresponding functionality) in the data_access sub-directory. routers contains all the REST endpoints called from the website. helpers contains some helper functions like the initialization methods for third party services.","title":"Directories"},{"location":"api/environment/","text":"Environment Variables \u00b6 When developing locally, include a .env file in the project root. The .env file with the appropriate production values should be manually deployed on the server. The .env file must not be checked into source control","title":"Environment Variables"},{"location":"api/environment/#environment-variables","text":"When developing locally, include a .env file in the project root. The .env file with the appropriate production values should be manually deployed on the server. The .env file must not be checked into source control","title":"Environment Variables"},{"location":"api/routers/","text":"Endpoints \u00b6 All the API endpoints are defined in the routers directory. admin.py - login endpoints for the admin dashboard committee.py - endpoints to fetch all the committee members dashboard.py - endpoints to fetch all the dashboard related data email_messages.py - endpoints to send emails from Sendgrid events.py - all the event related endpoints famous_alumni.py - endpoints related to the famous alumni page gallery.py - endpoints to fetch the images from Imagekit.io renewal.py - endpoints related to the renewal of annual memberships testimonial.py - all the testimonial related endpoints users.py - endpoints related to registration, id card and membership certificate creation","title":"Routers"},{"location":"api/routers/#endpoints","text":"All the API endpoints are defined in the routers directory. admin.py - login endpoints for the admin dashboard committee.py - endpoints to fetch all the committee members dashboard.py - endpoints to fetch all the dashboard related data email_messages.py - endpoints to send emails from Sendgrid events.py - all the event related endpoints famous_alumni.py - endpoints related to the famous alumni page gallery.py - endpoints to fetch the images from Imagekit.io renewal.py - endpoints related to the renewal of annual memberships testimonial.py - all the testimonial related endpoints users.py - endpoints related to registration, id card and membership certificate creation","title":"Endpoints"},{"location":"how_to/blog/","text":"How to create blog posts? \u00b6 The website uses Contentful as the CDN (content delivery network) to create and store blog posts. Blog posts, once created in Contentful , will automatically show up on the website. Log in to the Association's Contentful account Expand the navbar and select The MES AA Blog space Click on Add Blog on the top-right Fill up all the fields and click Publish The fields also contain a media section. The thumbnail image is mandatory. It can either be one of the existing images added to the media library or a new image. This image shows up in the blog summary card on https://mesalumniassociation.com/blog . The featured image is optional. This image is embedded inside the post.","title":"Create Blog Post"},{"location":"how_to/blog/#how-to-create-blog-posts","text":"The website uses Contentful as the CDN (content delivery network) to create and store blog posts. Blog posts, once created in Contentful , will automatically show up on the website. Log in to the Association's Contentful account Expand the navbar and select The MES AA Blog space Click on Add Blog on the top-right Fill up all the fields and click Publish The fields also contain a media section. The thumbnail image is mandatory. It can either be one of the existing images added to the media library or a new image. This image shows up in the blog summary card on https://mesalumniassociation.com/blog . The featured image is optional. This image is embedded inside the post.","title":"How to create blog posts?"},{"location":"how_to/emails/","text":"How to update email templates? \u00b6 All the email templates used are designed in SendGrid . The dynamic templates feature was one of the reasons why SendGrid was chosen as the cloud email provider. The static text and images in a template can be easily changed with zeo coding. Log in to the Association's SendGrid account Expand Email API and click on the Dynamic Templates link Next, select a template to update The template will open in a designer window where the text and images can be changed easily Do not add or update any field that is enclosed by {{ }} . These fields are populated dynamically and should therefore be added by developers only.","title":"Modify Emails"},{"location":"how_to/emails/#how-to-update-email-templates","text":"All the email templates used are designed in SendGrid . The dynamic templates feature was one of the reasons why SendGrid was chosen as the cloud email provider. The static text and images in a template can be easily changed with zeo coding. Log in to the Association's SendGrid account Expand Email API and click on the Dynamic Templates link Next, select a template to update The template will open in a designer window where the text and images can be changed easily Do not add or update any field that is enclosed by {{ }} . These fields are populated dynamically and should therefore be added by developers only.","title":"How to update email templates?"},{"location":"how_to/events/","text":"How to create an event? \u00b6 Log in to the Admin Dashboard Navigate to the Admin Panel tab and click on Create Event Enter all the event details and on the Create Event Button on the form Adding images for an event \u00b6 Log in to the Association's Imagekit.io account Navigate to MES-AA/Events/<name-of-the-event> ( MES-AA/Events/Super-special-event in this example) and drop the images in the folder. They will automatically show up on the event details page. Use the image compression method suggested in the updating the gallery","title":"Create Event"},{"location":"how_to/events/#how-to-create-an-event","text":"Log in to the Admin Dashboard Navigate to the Admin Panel tab and click on Create Event Enter all the event details and on the Create Event Button on the form","title":"How to create an event?"},{"location":"how_to/events/#adding-images-for-an-event","text":"Log in to the Association's Imagekit.io account Navigate to MES-AA/Events/<name-of-the-event> ( MES-AA/Events/Super-special-event in this example) and drop the images in the folder. They will automatically show up on the event details page. Use the image compression method suggested in the updating the gallery","title":"Adding images for an event"},{"location":"how_to/gallery/","text":"How to add images to the gallery? \u00b6 Compress the images using a tool like tinypng.com (or something similar) to reduce the overall size of the image. To the extent possible, use images in the .jpg or .jpeg format Log in to the Association's Imagekit.io account Navigate to MES-AA/Gallery on the dashboard and drop the compressed images Ensure that the number of images do not exceed 50","title":"Update Gallery"},{"location":"how_to/gallery/#how-to-add-images-to-the-gallery","text":"Compress the images using a tool like tinypng.com (or something similar) to reduce the overall size of the image. To the extent possible, use images in the .jpg or .jpeg format Log in to the Association's Imagekit.io account Navigate to MES-AA/Gallery on the dashboard and drop the compressed images Ensure that the number of images do not exceed 50","title":"How to add images to the gallery?"},{"location":"how_to/introduction/","text":"Notes for the MC Members \u00b6 This section contains step by step tutorials on how the office bearers, management committee members and other designated personnel can perform various admin tasks on the website.","title":"Introduction"},{"location":"how_to/introduction/#notes-for-the-mc-members","text":"This section contains step by step tutorials on how the office bearers, management committee members and other designated personnel can perform various admin tasks on the website.","title":"Notes for the MC Members"},{"location":"jobs/birthdays/","text":"Birthday Notifications \u00b6 This job checks the birthday column in the users table and sends out an email via SendGrid if it is the alumni's birthday. Once the job runs, the update_job_run_date() function is called to update jobs.job_last_runtime . The function takes the job id as an argument. The job_id corresponding to each job can be found in the jobs table.","title":"Birthday Notifications"},{"location":"jobs/birthdays/#birthday-notifications","text":"This job checks the birthday column in the users table and sends out an email via SendGrid if it is the alumni's birthday. Once the job runs, the update_job_run_date() function is called to update jobs.job_last_runtime . The function takes the job id as an argument. The job_id corresponding to each job can be found in the jobs table.","title":"Birthday Notifications"},{"location":"jobs/database_backup/","text":"Database Backup \u00b6 The PostgreSQL database is backed up daily. A shell script is used to create the backup by leveraging the pg_dump utility. This script is present in the /home directory of the postgres user. Once the job runs, the /jobs endpoint is called to update jobs.job_last_runtime . The job id is passed in the request payload. The job_id corresponding to each job can be found in the jobs table.","title":"Database Backup"},{"location":"jobs/database_backup/#database-backup","text":"The PostgreSQL database is backed up daily. A shell script is used to create the backup by leveraging the pg_dump utility. This script is present in the /home directory of the postgres user. Once the job runs, the /jobs endpoint is called to update jobs.job_last_runtime . The job id is passed in the request payload. The job_id corresponding to each job can be found in the jobs table.","title":"Database Backup"},{"location":"jobs/expiry_notifications/","text":"Expiry Notifications \u00b6 This job sends out an email to annual members on the day their membership has expired. Steps \u00b6 The job first calls the /recently_expired_memberships endpoint to get the list of all annual members whose membership expired on the day prior to the current run date of the job All memberships returned in the response are marked as expired by updating users.payment_status to false and users.membership_expired to true . An email is then sent to all the members with a renewal link Once the job runs, the update_job_run_date() function is called to update jobs.job_last_runtime . The function takes the job id as an argument. The job_id corresponding to each job can be found in the jobs table.","title":"Expiry Notifications"},{"location":"jobs/expiry_notifications/#expiry-notifications","text":"This job sends out an email to annual members on the day their membership has expired.","title":"Expiry Notifications"},{"location":"jobs/expiry_notifications/#steps","text":"The job first calls the /recently_expired_memberships endpoint to get the list of all annual members whose membership expired on the day prior to the current run date of the job All memberships returned in the response are marked as expired by updating users.payment_status to false and users.membership_expired to true . An email is then sent to all the members with a renewal link Once the job runs, the update_job_run_date() function is called to update jobs.job_last_runtime . The function takes the job id as an argument. The job_id corresponding to each job can be found in the jobs table.","title":"Steps"},{"location":"jobs/introduction/","text":"Jobs \u00b6 There are currently four standalone jobs running on the server. Birthday Notifications Expiry Notifications Renewal Reminders Database Backup Schedule \u00b6 Job Name Time Frequency Birthday Notifications 1 AM Daily Expiry Notifications 12:30 AM Daily Renewal Reminders 12:15 AM Daily Database Backup 12:15 AM Daily Times are local to the server The Database Backup job runs under the postgres user. The remaining jobs run under the sudo user. All the jobs are currently setup as cron jobs on the server. Checking the job status \u00b6 The last run date of the jobs is updated in the jobs table. The status of all jobs is visible in the Admin Panel .","title":"Introduction"},{"location":"jobs/introduction/#jobs","text":"There are currently four standalone jobs running on the server. Birthday Notifications Expiry Notifications Renewal Reminders Database Backup","title":"Jobs"},{"location":"jobs/introduction/#schedule","text":"Job Name Time Frequency Birthday Notifications 1 AM Daily Expiry Notifications 12:30 AM Daily Renewal Reminders 12:15 AM Daily Database Backup 12:15 AM Daily Times are local to the server The Database Backup job runs under the postgres user. The remaining jobs run under the sudo user. All the jobs are currently setup as cron jobs on the server.","title":"Schedule"},{"location":"jobs/introduction/#checking-the-job-status","text":"The last run date of the jobs is updated in the jobs table. The status of all jobs is visible in the Admin Panel .","title":"Checking the job status"},{"location":"jobs/renewal_reminders/","text":"Renewal Reminders \u00b6 This job is to send reminder emails to annual members whose membership is set to expire in - 30 days 1 day Steps \u00b6 First, the list of annual members whose membership is set to expire in 30 days is fetched by calling the /expiring_memberships/{30} Next, a renewal hash is added ( users.renewal_hash ) to all the records returned by the api call. The renewal hash is used to generate the renewal link An email is sent out with the renewal link The process is then repeated for members whose membership is expiring in 1 day. A new hash is generated and a new renewal link is emailed to the alumni. Once the job runs, the update_job_run_date() function is called to update jobs.job_last_runtime . The function takes the job id as an argument. The job_id corresponding to each job can be found in the jobs table.","title":"Birthday Notifications"},{"location":"jobs/renewal_reminders/#renewal-reminders","text":"This job is to send reminder emails to annual members whose membership is set to expire in - 30 days 1 day","title":"Renewal Reminders"},{"location":"jobs/renewal_reminders/#steps","text":"First, the list of annual members whose membership is set to expire in 30 days is fetched by calling the /expiring_memberships/{30} Next, a renewal hash is added ( users.renewal_hash ) to all the records returned by the api call. The renewal hash is used to generate the renewal link An email is sent out with the renewal link The process is then repeated for members whose membership is expiring in 1 day. A new hash is generated and a new renewal link is emailed to the alumni. Once the job runs, the update_job_run_date() function is called to update jobs.job_last_runtime . The function takes the job id as an argument. The job_id corresponding to each job can be found in the jobs table.","title":"Steps"},{"location":"website/admin_dashboard/","text":"Admin Dashboard \u00b6 The admin dashboard provides a means for the Association to keep track of memberships, funds collected and to perform admin functions like updating the payment status and creating events. Accessing the dashboard \u00b6 The route for the dashboard is /dashboard/<admin_id> . This admin id is stored as an environment variable NEXT_PUBLIC_ADMIN_ID . The route is protected and requires the user to log in. The user id and password are stored in LastPass.. . Logging in to this page will redirect the user to /alumniassndashboard . A successful login will return a JWT from the server which subsequently needs to be sent with every call made to a dashboard related endpoint exposed by the Python api. The /alumniassndashboard route contains three tabs - Alumni Funds Admin Panel The Alumni tab contains all the membership details like the counts and breakdown of the counts displayed in data grids that can be exported to .csv files. The Funds tab shows the membership fees collected. The Admin Panel \u00b6 The Admin Panel tab at present contains three features. Update Payment Status - this is used to update the payment status of the alumni who opted for manual payments during registration or renewal. Once the manual payment is realized by the Association, the concerned member can then enter the membership id of the alumnus and update the payment status to Paid . This updates users.payment_status to true . Jobs - this is used to display the status of all the jobs running on the server. Check the Jobs section for more information about all the jobs. Create Event - this form is used to create an event. Once an event is created, an email is sent out to all the active members who have not unsubscribed from email notifications. In other words, if users.email_subscription_status is true , the email is sent. More on events \u00b6 The creation of a new event results creates a corresponding folder in Imagekit.io wherein images can be added. These images will show up in the gallery for that specific event. The gallery will be visible on the page for that event - /events/<event_id> . If an event titled Annual general body meeting is created using the Create Event form on the Admin Panel, then a folder named Annual-general-body-meeting will be created in Imagekit.io under MES-AA/Events . There is no image uploader functionality from the website to add images to the event gallery. The addition needs to be done directly in Imagekit.io .","title":"Admin Dashboard"},{"location":"website/admin_dashboard/#admin-dashboard","text":"The admin dashboard provides a means for the Association to keep track of memberships, funds collected and to perform admin functions like updating the payment status and creating events.","title":"Admin Dashboard"},{"location":"website/admin_dashboard/#accessing-the-dashboard","text":"The route for the dashboard is /dashboard/<admin_id> . This admin id is stored as an environment variable NEXT_PUBLIC_ADMIN_ID . The route is protected and requires the user to log in. The user id and password are stored in LastPass.. . Logging in to this page will redirect the user to /alumniassndashboard . A successful login will return a JWT from the server which subsequently needs to be sent with every call made to a dashboard related endpoint exposed by the Python api. The /alumniassndashboard route contains three tabs - Alumni Funds Admin Panel The Alumni tab contains all the membership details like the counts and breakdown of the counts displayed in data grids that can be exported to .csv files. The Funds tab shows the membership fees collected.","title":"Accessing the dashboard"},{"location":"website/admin_dashboard/#the-admin-panel","text":"The Admin Panel tab at present contains three features. Update Payment Status - this is used to update the payment status of the alumni who opted for manual payments during registration or renewal. Once the manual payment is realized by the Association, the concerned member can then enter the membership id of the alumnus and update the payment status to Paid . This updates users.payment_status to true . Jobs - this is used to display the status of all the jobs running on the server. Check the Jobs section for more information about all the jobs. Create Event - this form is used to create an event. Once an event is created, an email is sent out to all the active members who have not unsubscribed from email notifications. In other words, if users.email_subscription_status is true , the email is sent.","title":"The Admin Panel"},{"location":"website/admin_dashboard/#more-on-events","text":"The creation of a new event results creates a corresponding folder in Imagekit.io wherein images can be added. These images will show up in the gallery for that specific event. The gallery will be visible on the page for that event - /events/<event_id> . If an event titled Annual general body meeting is created using the Create Event form on the Admin Panel, then a folder named Annual-general-body-meeting will be created in Imagekit.io under MES-AA/Events . There is no image uploader functionality from the website to add images to the event gallery. The addition needs to be done directly in Imagekit.io .","title":"More on events"},{"location":"website/data_update/","text":"Update the Association data \u00b6 All the data related to the Association is present in /utils/associationDetails.js . This includes The Association name Name of the college Email address Contact number Address Social medial url's The membership fees are stored as environment variables - NEXT_PUBLIC_LIFE_MEMBERSHIP_AMOUNT and NEXT_PUBLIC_ANNUAL_MEMBERSHIP_AMOUNT .","title":"Update Association Data"},{"location":"website/data_update/#update-the-association-data","text":"All the data related to the Association is present in /utils/associationDetails.js . This includes The Association name Name of the college Email address Contact number Address Social medial url's The membership fees are stored as environment variables - NEXT_PUBLIC_LIFE_MEMBERSHIP_AMOUNT and NEXT_PUBLIC_ANNUAL_MEMBERSHIP_AMOUNT .","title":"Update the Association data"},{"location":"website/environment/","text":"Environment Variables \u00b6 When developing locally, it is sufficient to include a .env.local file in the project root. However, when deploying, the build uses the environment variables from Travis CI . Any new environment variable or any update to an existing environment variable must therefore be made in Travis CI before running the CI/CD pipeline. Environment variables can be added by accessing the settings of a repository in Travis CI . The .env.local file must not be checked into source control","title":"Environment Variables"},{"location":"website/environment/#environment-variables","text":"When developing locally, it is sufficient to include a .env.local file in the project root. However, when deploying, the build uses the environment variables from Travis CI . Any new environment variable or any update to an existing environment variable must therefore be made in Travis CI before running the CI/CD pipeline. Environment variables can be added by accessing the settings of a repository in Travis CI . The .env.local file must not be checked into source control","title":"Environment Variables"},{"location":"website/famous_alumni/","text":"Famous Alumni \u00b6 The details of the famous alumni visible in /famousalumni are stored in the famous_alumni table. Changes therefore need to be made in this table whenever there are new additions to the list. Images are available only for the Padma awardees and are stored in MES-AA/Site_Images/Famous-Alumni on Imagekit.io . To keep the bandwidth usage low, delete photos of members who are no longer OB's or MC Members Preferably upload images in the .jpg format Compress the images by running them through tinypng.com (or a similar utility) prior to uploading","title":"Famous Alumni"},{"location":"website/famous_alumni/#famous-alumni","text":"The details of the famous alumni visible in /famousalumni are stored in the famous_alumni table. Changes therefore need to be made in this table whenever there are new additions to the list. Images are available only for the Padma awardees and are stored in MES-AA/Site_Images/Famous-Alumni on Imagekit.io . To keep the bandwidth usage low, delete photos of members who are no longer OB's or MC Members Preferably upload images in the .jpg format Compress the images by running them through tinypng.com (or a similar utility) prior to uploading","title":"Famous Alumni"},{"location":"website/gallery/","text":"Gallery \u00b6 The main image gallery is located at the route /gallery . Adding images to the gallery \u00b6 Adding images should be done directly in Imageki.io -> MES-AA/Gallery . There is no image upload option from the website. The Association intends to use the free tier of Imagekit.io to the extent possible. The free tier currently offers 20GB of free bandwidth monthly. With the caching strategy that has been implemented, this is more than sufficient for the foreseeable future. Steps to limit bandwidth usage \u00b6 Keep the number of images in gallery limited to 50. Delete older images if required to keep the gallery fresh Preferably upload images in the .jpg format Compress the images by running them through tinypng.com (or a similar utility) prior to uploading","title":"Image Gallery"},{"location":"website/gallery/#gallery","text":"The main image gallery is located at the route /gallery .","title":"Gallery"},{"location":"website/gallery/#adding-images-to-the-gallery","text":"Adding images should be done directly in Imageki.io -> MES-AA/Gallery . There is no image upload option from the website. The Association intends to use the free tier of Imagekit.io to the extent possible. The free tier currently offers 20GB of free bandwidth monthly. With the caching strategy that has been implemented, this is more than sufficient for the foreseeable future.","title":"Adding images to the gallery"},{"location":"website/gallery/#steps-to-limit-bandwidth-usage","text":"Keep the number of images in gallery limited to 50. Delete older images if required to keep the gallery fresh Preferably upload images in the .jpg format Compress the images by running them through tinypng.com (or a similar utility) prior to uploading","title":"Steps to limit bandwidth usage"},{"location":"website/members/","text":"Association Members \u00b6 The details of the association members visible in /about are stored in the committee table. Additions or changes therefore need to be made in this table whenever there are any personnel changes. The table contains the role column to differentiate between Office Bearers ( role = ob ) and Management Committee Members ( role = mc ). Profile photos \u00b6 All profile photos are stored in Imagekit.io . Office Bearers - MES-AA/Site_Images/About/Committee/OB MC Members - MES-AA/Site_Images/About/Committee/MC To keep the bandwidth usage low, delete photos of members who are no longer OB's or MC Members Preferably upload images in the .jpg format Compress the images by running them through tinypng.com (or a similar utility) prior to uploading","title":"Association Members"},{"location":"website/members/#association-members","text":"The details of the association members visible in /about are stored in the committee table. Additions or changes therefore need to be made in this table whenever there are any personnel changes. The table contains the role column to differentiate between Office Bearers ( role = ob ) and Management Committee Members ( role = mc ).","title":"Association Members"},{"location":"website/members/#profile-photos","text":"All profile photos are stored in Imagekit.io . Office Bearers - MES-AA/Site_Images/About/Committee/OB MC Members - MES-AA/Site_Images/About/Committee/MC To keep the bandwidth usage low, delete photos of members who are no longer OB's or MC Members Preferably upload images in the .jpg format Compress the images by running them through tinypng.com (or a similar utility) prior to uploading","title":"Profile photos"},{"location":"website/navbar/","text":"Adding links to the navbar \u00b6 The navbar on each page contains different links. The links for each page are specified in /utils/navLinks.js . Let's say for instance we are adding a new route to the website called /donations . To add links to /donations in the navbar, we will first create an object called donations (can be named anything) in navLinks.js . const donations = { path: \"Donations\", url: \"/donations\", icon: <FontAwesomeIcon icon={faHandHolding} style={{ fontSize: \"1.5rem\" }} />, } Now, to add a link to /donations on the about page, we can simply update the navlinks object. const navLinks = { ... \"/about\": [home, pricing, contact, donations], ... } To add nav links that will be visible on the /donations page, we can update the same navLinks object. const navLinks = { ... \"/about\" : [ home , pricing , contact , donations ], \"/donations\" : [ home , pricing , contact , about ] ... }","title":"Navbar"},{"location":"website/navbar/#adding-links-to-the-navbar","text":"The navbar on each page contains different links. The links for each page are specified in /utils/navLinks.js . Let's say for instance we are adding a new route to the website called /donations . To add links to /donations in the navbar, we will first create an object called donations (can be named anything) in navLinks.js . const donations = { path: \"Donations\", url: \"/donations\", icon: <FontAwesomeIcon icon={faHandHolding} style={{ fontSize: \"1.5rem\" }} />, } Now, to add a link to /donations on the about page, we can simply update the navlinks object. const navLinks = { ... \"/about\": [home, pricing, contact, donations], ... } To add nav links that will be visible on the /donations page, we can update the same navLinks object. const navLinks = { ... \"/about\" : [ home , pricing , contact , donations ], \"/donations\" : [ home , pricing , contact , about ] ... }","title":"Adding links to the navbar"},{"location":"website/registration_payments/","text":"Registration & Payments \u00b6 The end to end workflow for registration. Completing the registration form \u00b6 Once the alumni navigates to the /register route or clicks on the Membership link in the navbar, they are routed to the /pricing page to select the membership option. Once a membership is selected, it is saved in the browser's local storage and the alumni are routed to /register Once the alumni fill up all the required fields in the first three steps of the registration form, they can navigate to the fourth step which includes a summary of the membership and payment details Online payment \u00b6 The website integrates with Razorpay as the payment gateway. When an alumni clicks on the PAY ONLINE button, the Razorpay modal is displayed The alumni can choose from a wide variety of pre-configured payment options to pay the membership fee If there is an issue with the payment, the payment times out and alumni is redirected to the last step of the registration process If the payment is successful, the alumni is routed to the /paymentverified/<id> route What happens when PAY ONLINE is clicked? \u00b6 By clicking PAY ONLINE we are submitting the form. One of the first things that happens is that all the registration related data is stored in the local storage. Next, a payment order is created by the createOrder() function which internally calls the /orders endpoint exposed by the Python api. Once the order is successfully created and the order id is returned by the api, the displayRazorPay() function is called within a useEffect() . Next, the order id and other options are passed to the checkout ( https://checkout.razorpay.com/v1/checkout.js ) to display the modal. Once a payment is made successfully, RazorPay mandates that we validate the authenticity of the details that were sent to the checkout. This is done by calling the verifyPayment() method which internally calls the /verification endpoint exposed by the Python api. If the verification is successful, the api returns a null . At this point, we save all our data to the users table in our database and the alumni is redirected to the /paymentverified/<id> . For such payments, the payment_status column in the users table is set to true and the payment_mode is set to O (online). On successful registration, the alumni receive a welcome email from the President and the payment receipt. Alternate payment method \u00b6 The alumni can also opt for manual payments by means of cheques, demand drafts, or EFT's. When the SEE ALTERNATE PAYMENT OPTION button is clicked, a modal is displayed with details about the various manual payment options. Once the CONFIRM button is clicked, a record is created in the users table with the payment_status set to false and the payment_mode set to M (manual). Once the record is created, the alumni will be redirected to /paymentinfo/<email> . An email is containing all the payment related information is sent to the alumni. Once the payment is realized by the Association, an association member can use the Admin Panel to updated the payment status. Id Card and Certificate \u00b6 Irrespective of whether the alumni has chosen to pay online or manually, links for their id cards and certificates are generated automatically as soon as the record is inserted into the users table. The table contains an alt_user_id column which is a uuid generated whenever a record is inserted. Id cards for a user can be accessed at /card/<alt_user_id> Certificates can be accessed at /certificate/<alt_user_id> Id cards and certificates contain a membership id. The format of this id is - MESAA-(type of membership: LM/OM)-(last two digits of an alumnus' year of passing)-(id in the users table) Ex 1: If a L ife M ember passed out in 1999 ( users.duration_end ) and has an id ( users.id ) of 10, then the membership id will be MESAA-LM-99-10 Ex 2: If an O rdinary M ember/Annual Member passed out in 2002 ( users.duration_end ) and has an id ( users.id ) of 9, then the membership id will be MESAA-LM-02-09","title":"Registration & Payments"},{"location":"website/registration_payments/#registration-payments","text":"The end to end workflow for registration.","title":"Registration &amp; Payments"},{"location":"website/registration_payments/#completing-the-registration-form","text":"Once the alumni navigates to the /register route or clicks on the Membership link in the navbar, they are routed to the /pricing page to select the membership option. Once a membership is selected, it is saved in the browser's local storage and the alumni are routed to /register Once the alumni fill up all the required fields in the first three steps of the registration form, they can navigate to the fourth step which includes a summary of the membership and payment details","title":"Completing the registration form"},{"location":"website/registration_payments/#online-payment","text":"The website integrates with Razorpay as the payment gateway. When an alumni clicks on the PAY ONLINE button, the Razorpay modal is displayed The alumni can choose from a wide variety of pre-configured payment options to pay the membership fee If there is an issue with the payment, the payment times out and alumni is redirected to the last step of the registration process If the payment is successful, the alumni is routed to the /paymentverified/<id> route","title":"Online payment"},{"location":"website/registration_payments/#what-happens-when-pay-online-is-clicked","text":"By clicking PAY ONLINE we are submitting the form. One of the first things that happens is that all the registration related data is stored in the local storage. Next, a payment order is created by the createOrder() function which internally calls the /orders endpoint exposed by the Python api. Once the order is successfully created and the order id is returned by the api, the displayRazorPay() function is called within a useEffect() . Next, the order id and other options are passed to the checkout ( https://checkout.razorpay.com/v1/checkout.js ) to display the modal. Once a payment is made successfully, RazorPay mandates that we validate the authenticity of the details that were sent to the checkout. This is done by calling the verifyPayment() method which internally calls the /verification endpoint exposed by the Python api. If the verification is successful, the api returns a null . At this point, we save all our data to the users table in our database and the alumni is redirected to the /paymentverified/<id> . For such payments, the payment_status column in the users table is set to true and the payment_mode is set to O (online). On successful registration, the alumni receive a welcome email from the President and the payment receipt.","title":"What happens when PAY ONLINE is clicked?"},{"location":"website/registration_payments/#alternate-payment-method","text":"The alumni can also opt for manual payments by means of cheques, demand drafts, or EFT's. When the SEE ALTERNATE PAYMENT OPTION button is clicked, a modal is displayed with details about the various manual payment options. Once the CONFIRM button is clicked, a record is created in the users table with the payment_status set to false and the payment_mode set to M (manual). Once the record is created, the alumni will be redirected to /paymentinfo/<email> . An email is containing all the payment related information is sent to the alumni. Once the payment is realized by the Association, an association member can use the Admin Panel to updated the payment status.","title":"Alternate payment method"},{"location":"website/registration_payments/#id-card-and-certificate","text":"Irrespective of whether the alumni has chosen to pay online or manually, links for their id cards and certificates are generated automatically as soon as the record is inserted into the users table. The table contains an alt_user_id column which is a uuid generated whenever a record is inserted. Id cards for a user can be accessed at /card/<alt_user_id> Certificates can be accessed at /certificate/<alt_user_id> Id cards and certificates contain a membership id. The format of this id is - MESAA-(type of membership: LM/OM)-(last two digits of an alumnus' year of passing)-(id in the users table) Ex 1: If a L ife M ember passed out in 1999 ( users.duration_end ) and has an id ( users.id ) of 10, then the membership id will be MESAA-LM-99-10 Ex 2: If an O rdinary M ember/Annual Member passed out in 2002 ( users.duration_end ) and has an id ( users.id ) of 9, then the membership id will be MESAA-LM-02-09","title":"Id Card and Certificate"},{"location":"website/renewals/","text":"Annual Membership Renewals \u00b6 Alumni whose memberships are due to expire or have already expired are sent a renewal link via email. This link redirects the alumni to the /renewal route. Here, the alumni can either renew their annual memberships for a year or can upgrade to a life membership. The alumni can choose to pay online or manually. The payment logic is exactly same as that used for the registration process. If annual members upgrade to a lifetime membership, the renewal process automatically generates the url for their certificate and nullifies the valid up to date ( users.membership_valid_upto ).","title":"Renewals"},{"location":"website/renewals/#annual-membership-renewals","text":"Alumni whose memberships are due to expire or have already expired are sent a renewal link via email. This link redirects the alumni to the /renewal route. Here, the alumni can either renew their annual memberships for a year or can upgrade to a life membership. The alumni can choose to pay online or manually. The payment logic is exactly same as that used for the registration process. If annual members upgrade to a lifetime membership, the renewal process automatically generates the url for their certificate and nullifies the valid up to date ( users.membership_valid_upto ).","title":"Annual Membership Renewals"},{"location":"website/site_structure/","text":"Project Structure \u00b6 The javascript portion of the frontend is built with Next.js and React . To the extent possible, components have been placed in folders named after the page that they are rendered into. Directories \u00b6 The pages directory contains all the page routes. This is a directory created by Next.js for file based routing. The index.js file is required and it resolves to / . about.js resolves to /about , contact.js resolves to /contact and so on. The components directory contains all the UI components. components/forms contains all the form components, components/layout includes all the common layout components like the navbar and the footer in addition to the markup that goes into <head> on each page. components/utils contain the UI components that are rendered on different web pages. components/utils/generic contains shared components. The context directory contains the context api logic which is used to fetch data from the Python api and add it to the state The public directory contains all the public assets like the various site icons, the favicon and the loader. Although most of the images on the website are rendered from Imagekit.io , some background images, social media icons etc are present in public/images The utils directory in the project root contains JavaScript files with helper functions, data for drop down lists and some generic data that is shared across different components The styles directory contains the CSS files used by the site. More information about the styling of the website can be found here Tests \u00b6 For tests, the project uses the React Testing Library and Jest . All the tests are included in the __tests__ directory. Other Jest related configuration is included in the jest.config.js and the jest.setup.js files. Error Tracking and Logging \u00b6 Sentry is used to track and log errors from the website. Sentry related configuration is included in the next.config.js , sentry.client.config.js , sentry.server.config.js and sentry.properties files.","title":"Project Structure"},{"location":"website/site_structure/#project-structure","text":"The javascript portion of the frontend is built with Next.js and React . To the extent possible, components have been placed in folders named after the page that they are rendered into.","title":"Project Structure"},{"location":"website/site_structure/#directories","text":"The pages directory contains all the page routes. This is a directory created by Next.js for file based routing. The index.js file is required and it resolves to / . about.js resolves to /about , contact.js resolves to /contact and so on. The components directory contains all the UI components. components/forms contains all the form components, components/layout includes all the common layout components like the navbar and the footer in addition to the markup that goes into <head> on each page. components/utils contain the UI components that are rendered on different web pages. components/utils/generic contains shared components. The context directory contains the context api logic which is used to fetch data from the Python api and add it to the state The public directory contains all the public assets like the various site icons, the favicon and the loader. Although most of the images on the website are rendered from Imagekit.io , some background images, social media icons etc are present in public/images The utils directory in the project root contains JavaScript files with helper functions, data for drop down lists and some generic data that is shared across different components The styles directory contains the CSS files used by the site. More information about the styling of the website can be found here","title":"Directories"},{"location":"website/site_structure/#tests","text":"For tests, the project uses the React Testing Library and Jest . All the tests are included in the __tests__ directory. Other Jest related configuration is included in the jest.config.js and the jest.setup.js files.","title":"Tests"},{"location":"website/site_structure/#error-tracking-and-logging","text":"Sentry is used to track and log errors from the website. Sentry related configuration is included in the next.config.js , sentry.client.config.js , sentry.server.config.js and sentry.properties files.","title":"Error Tracking and Logging"},{"location":"website/site_style/","text":"Website Styling \u00b6 A lot of the UI components of the website use Material UI . However, the decision to use Material UI was taken after some of the initial pages were built. As a result, the source of the styling is not consistent across the website (there is a refactoring opportunity here). The styles directory contains the following files globals.css - common styles used across the website Home.module.css - styles specifically for the home route ( / ) FamousAlumni.module.css - styles specifically for the famous alumni page ( /famousalumni ) Almost all the individual UI components use the makeStyles() method provided by Material UI . How do I identify the source file of the style? \u00b6 <div className=\"myStyle\"> -> .myStyle is defined in globals.css <div className={styles.myStyle}> -> .myStyle is defined in either Home.module.css or FamousAlumni.module.css . These will be found only in the components used by the home and famous alumni pages <div className={classes.myStyle}> -> myStyle is defined at the yop of the component using the makeStyles() method","title":"Styling"},{"location":"website/site_style/#website-styling","text":"A lot of the UI components of the website use Material UI . However, the decision to use Material UI was taken after some of the initial pages were built. As a result, the source of the styling is not consistent across the website (there is a refactoring opportunity here). The styles directory contains the following files globals.css - common styles used across the website Home.module.css - styles specifically for the home route ( / ) FamousAlumni.module.css - styles specifically for the famous alumni page ( /famousalumni ) Almost all the individual UI components use the makeStyles() method provided by Material UI .","title":"Website Styling"},{"location":"website/site_style/#how-do-i-identify-the-source-file-of-the-style","text":"<div className=\"myStyle\"> -> .myStyle is defined in globals.css <div className={styles.myStyle}> -> .myStyle is defined in either Home.module.css or FamousAlumni.module.css . These will be found only in the components used by the home and famous alumni pages <div className={classes.myStyle}> -> myStyle is defined at the yop of the component using the makeStyles() method","title":"How do I identify the source file of the style?"},{"location":"website/testimonials/","text":"Testimonials \u00b6 All the testimonials are stored in the testimonials table. Alumni can submit a testimonial using the WRITE A TESTIMONIAL option on either the / or the /testimonials routes. What happens when a testimonial is submitted? \u00b6 A record is created in the testimonials table with the approved attribute set to false An email is sent to the Association with the testimonial details and a link to approve the testimonial Once the testimonial is approved, the approved attribute is set to true for that testimonial Testimonial is added to the website","title":"Testimonials"},{"location":"website/testimonials/#testimonials","text":"All the testimonials are stored in the testimonials table. Alumni can submit a testimonial using the WRITE A TESTIMONIAL option on either the / or the /testimonials routes.","title":"Testimonials"},{"location":"website/testimonials/#what-happens-when-a-testimonial-is-submitted","text":"A record is created in the testimonials table with the approved attribute set to false An email is sent to the Association with the testimonial details and a link to approve the testimonial Once the testimonial is approved, the approved attribute is set to true for that testimonial Testimonial is added to the website","title":"What happens when a testimonial is submitted?"}]}